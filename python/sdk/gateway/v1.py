# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: gateway/v1/gateway.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, List

import betterproto
import grpclib

import sdk.compass.v1 as compass
import sdk.location.v1 as location
import sdk.native.v1 as native
import sdk.platform.v1 as platform


@dataclass
class AuthenticateRequest(betterproto.Message):
    token: str = betterproto.string_field(1)


@dataclass
class AuthenticateResponse(betterproto.Message):
    access_token: str = betterproto.string_field(1)


@dataclass
class Foo(betterproto.Message):
    bar: str = betterproto.string_field(1)


@dataclass
class FooRequest(betterproto.Message):
    foo: List["Foo"] = betterproto.message_field(1)


class ServiceStub(betterproto.ServiceStub):
    """
    RPC Naming structure <FilterType><OutputType> Where filterTypes: [   Road
    Polygon   OriginDestination ] And outputTypes: [   Aggregate   Raw
    NearMiss ]
    """

    async def authenticate(self, *, token: str = "") -> AuthenticateResponse:
        request = AuthenticateRequest()
        request.token = token

        return await self._unary_unary(
            "/gateway.v1.Service/Authenticate",
            request,
            AuthenticateResponse,
        )

    async def aggregate_by_path(self, request: platform.AggregateByPathRequest) -> platform.AggregateByPathResponse:
        """RoadIntel: AggregateByPath"""
        return await self._unary_unary(
            "/gateway.v1.Service/AggregateByPath",
            request,
            platform.AggregateByPathResponse,
        )

    async def origin_destination(self, request: platform.OriginDestinationRequest) -> platform.OriginDestinationResponse:
        return await self._unary_unary(
            "/gateway.v1.Service/OriginDestination",
            request,
            platform.OriginDestinationResponse,
        )

    async def reverse_geocode(self, request: location.ReverseGeocodeRequest) -> location.ReverseGeocodeResponse:
        return await self._unary_unary(
            "/gateway.v1.Service/ReverseGeocode",
            request,
            location.ReverseGeocodeResponse,
        )

    async def realtime_raw_point_by_geometry(self, request: platform.RealtimeRawPointByGeometryRequest) -> AsyncGenerator[compass.PositionEvent, None]:
        async for response in self._unary_stream(
            "/gateway.v1.Service/RealtimeRawPointByGeometry",
            request,
            compass.PositionEvent,
        ):
            yield response

    async def processed_point_by_geometry(self, request: platform.ProcessedPointByGeometryRequest) -> AsyncGenerator[platform.ProcessedPoint, None]:
        async for response in self._unary_stream(
            "/gateway.v1.Service/ProcessedPointByGeometry",
            request,
            platform.ProcessedPoint,
        ):
            yield response

    async def native_add_vehicle(self, request: native.AddVehicleRequest) -> native.AddVehicleResponse:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeAddVehicle",
            request,
            native.AddVehicleResponse,
        )

    async def native_update_vehicle(self, request: native.UpdateVehicleRequest) -> None:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeUpdateVehicle",
            request,
            None,
        )

    async def native_remove_vehicle(self, request: native.RemoveVehicleRequest) -> None:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeRemoveVehicle",
            request,
            None,
        )

    async def native_get_vehicles(self) -> native.GetVehiclesResponse:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeGetVehicles",
            None,
            native.GetVehiclesResponse,
        )

    async def native_historical_export(self, request: native.HistoricalExportRequest) -> native.HistoricalExportResponse:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeHistoricalExport",
            request,
            native.HistoricalExportResponse,
        )

    async def native_get_latest_point(self, request: native.GetLatestPointRequest) -> native.GetLatestPointResponse:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeGetLatestPoint",
            request,
            native.GetLatestPointResponse,
        )

    async def native_issue_action(self, request: native.IssueActionRequest) -> None:
        return await self._unary_unary(
            "/gateway.v1.Service/NativeIssueAction",
            request,
            None,
        )
